"use strict";(self.webpackChunkjuggin=self.webpackChunkjuggin||[]).push([[267],{5162:(e,n,t)=>{t.d(n,{Z:()=>a});var o=t(7294),r=t(6010);const i={tabItem:"tabItem_Ymn6"};function a(e){let{children:n,hidden:t,className:a}=e;return o.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,a),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>C});var o=t(7462),r=t(7294),i=t(6010),a=t(2466),s=t(6550),l=t(1980),c=t(7392),u=t(12);function f(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:r}}=e;return{value:n,label:t,attributes:o,default:r}}))}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??f(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const o=(0,s.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(o.location.search);n.set(i,e),o.replace({...o.location,search:n.toString()})}),[i,o])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,i=d(e),[a,s]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:i}))),[l,c]=g({queryString:t,groupId:o}),[f,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,i]=(0,u.Nk)(t);return[o,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:o}),y=(()=>{const e=l??f;return p({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{y&&s(y)}),[y]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),m(e)}),[c,m,i]),tabValues:i}}var y=t(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:n,block:t,selectedValue:s,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:f}=(0,a.o5)(),d=e=>{const n=e.currentTarget,t=u.indexOf(n),o=c[t].value;o!==s&&(f(n),l(o))},p=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n)},c.map((e=>{let{value:n,label:t,attributes:a}=e;return r.createElement("li",(0,o.Z)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>u.push(e),onKeyDown:p,onClick:d},a,{className:(0,i.Z)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":s===n})}),t??n)})))}function k(e){let{lazy:n,children:t,selectedValue:o}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==o}))))}function v(e){const n=m(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",b.tabList)},r.createElement(h,(0,o.Z)({},e,n)),r.createElement(k,(0,o.Z)({},e,n)))}function C(e){const n=(0,y.Z)();return r.createElement(v,(0,o.Z)({key:String(n)},e))}},107:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>u,default:()=>y,frontMatter:()=>c,metadata:()=>f,toc:()=>p});var o=t(7462),r=(t(7294),t(3905)),i=t(4866),a=t(5162),s=t(452);const l={red:"red_n3Oz"},c={sidebar_position:2,sidebar_label:"Events/Exports"},u=void 0,f={unversionedId:"ESX/SickDirtyCops/Config",id:"ESX/SickDirtyCops/Config",title:"Config",description:"Config",source:"@site/docs/ESX/SickDirtyCops/Config.md",sourceDirName:"ESX/SickDirtyCops",slug:"/ESX/SickDirtyCops/Config",permalink:"/docs/ESX/SickDirtyCops/Config",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Events/Exports"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/ESX/SickDirtyCops/Installation"},next:{title:"Pictures",permalink:"/docs/ESX/SickDirtyCops/Pictures"}},d={},p=[{value:"Config",id:"config",level:2},{value:"Notifications",id:"notifications",level:2},{value:"Events/Exports",id:"eventsexports",level:2}],g={toc:p},m="wrapper";function y(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,o.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"config"},"Config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title='Config.lua' showLineNumbers",title:"'Config.lua'",showLineNumbers:!0},"Config = {}\n\nConfig.MenuType = 'ox_libs'\n\nConfig.Price = 5000 -- price for checking cops AND making inventory\nConfig.TruckPrice = 5000 -- price to check info on the truck heist\nConfig.Inventory = 'ox'\nConfig.Target = 'ox_target'\nConfig.TruckUSB = 'greenusb'\nConfig.PoliceJobName = {\n    'police'\n}\nConfig.CashAccount = 'black_money'\nConfig.TruckAccount = 'black_money'\nConfig.NotificationType = { --['okokNotify' / 'mythic' / 'esx' / 'chat' / 'custom' ]\n    client = 'okokNotify', \n    server = 'okokNotify'\n}\n\nConfig.GreenDongle = 'greenusb' -- item needed to open the Menu\n\nConfig.InventoryOptions = { \n    inventoryType = \"inventory\",\n    inventorySubType = \"housing\",\n    inventoryLabel = \"drop_box\",\n    maxWeight = 100.0,\n    maxSlots = 10,\n    OxLabel = \"Drop Box\" -- If using ox inventory this matters if not its nothing\n}\n\nConfig.Peds = {\n    [1] = {\n        Name = \"Zeus Almighty\",\n        TargetName = 'illegal_shop1',\n        SpawnName = 'IG_RoccoPelosi',\n        location = vector4(-218.7603, 317.5758, 96.0402,230.7158),\n        OpenTime = 1, -- Open Time\n        CloseTime = 8, -- Closing Time\n    },\n}\n\nConfig.TruckInfo = {\n    TruckPrice = 5000,\n    TruckLocation = vector3(569.46, -3127.42, 18.77)\n}\n\nConfig.RobberyList = {\n    [1] = {\n        Header = \"Fleeca Banks\",\n        icon = 'fa-solid fa-bank',\n        minCops = 0,\n        bank = true,\n    },\n    [2] = {\n        Header = \"Store robbery\",\n        icon = 'fa-solid fa-store',\n        minCops = 0,\n        bank = false, -- some just need to be here to help script function without error\n    },\n    [3] = {\n        Header = \"Pacific Bank\",\n        icon = 'fa-solid fa-bank',\n        minCops = 0,\n        bank = true,\n    },\n    [4] = {\n        Header = \"House Robbery\",\n        icon = 'fa-solid fa-house',\n        minCops = 0,\n        bank = false, -- some just need to be here to help script function without error\n    },\n    [5] = {\n        Header = \"Truck Heist\",\n        icon = 'fa-solid fa-truck',\n        minCops = 0,\n        bank = false,\n    },\n}\n")),(0,r.kt)("h2",{id:"notifications"},"Notifications"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(a.Z,{value:"server",label:"Client Notifications",attributes:{className:l.red},mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"jsx",title:"Client Notifications",showLineNumbers:!0,mdxType:"CodeBlock"},"function Cnotify(noty_type, message)\n    if noty_type and message then\n        if Config.NotificationType.client == 'esx' then\n            ESX.ShowNotification(message)\n        elseif Config.NotificationType.client == 'okokNotify' then\n            if noty_type == 1 then\n                exports['okokNotify']:Alert(\"Dongle\", message, 10000, 'success')\n            elseif noty_type == 2 then\n                exports['okokNotify']:Alert(\"Dongle\", message, 10000, 'info')\n            elseif noty_type == 3 then\n                exports['okokNotify']:Alert(\"Dongle\", message, 10000, 'error')\n            end\n        elseif Config.NotificationType.client == 'mythic' then\n            if noty_type == 1 then\n                exports['mythic_notify']:SendAlert('success', message, { ['background-color'] = '#ffffff', ['color'] = '#000000' })\n            elseif noty_type == 2 then\n                exports['mythic_notify']:SendAlert('inform', message, { ['background-color'] = '#ffffff', ['color'] = '#000000' })\n            elseif noty_type == 3 then\n                exports['mythic_notify']:SendAlert('error', message, { ['background-color'] = '#ffffff', ['color'] = '#000000' })\n            end\n        elseif Config.NotificationType.client == 'chat' then\n            TriggerEvent('chatMessage', message)        \n        elseif Config.NotificationType.client == 'other' then\n            --add your own notification.       \n        end\n    end\nend")),(0,r.kt)(a.Z,{value:"client",label:"Server Notifications",attributes:{className:l.red},mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"jsx",title:"Server Notifications",showLineNumbers:!0,mdxType:"CodeBlock"},"function Snotify(source, noty_type, message) -- Not Needed as is but maybe future update\n    if source and noty_type and message then\n        if Config.NotificationType.server == 'esx' then\n            TriggerClientEvent('esx:showNotification', source, message)        \n        elseif Config.NotificationType.server == 'okokNotify' then\n            if noty_type == 1 then\n                TriggerClientEvent('okokNotify:Alert', source, 'Dongle', message, 10000, 'success')\n            elseif noty_type == 2 then\n                TriggerClientEvent('okokNotify:Alert', source, 'Dongle', message, 10000, 'info')\n            elseif noty_type == 3 then\n                TriggerClientEvent('okokNotify:Alert', source, 'Dongle', message, 10000, 'error')\n            end\n        elseif Config.NotificationType.server == 'mythic' then\n            if noty_type == 1 then\n                TriggerClientEvent('mythic_notify:client:SendAlert', source, { type = 'success', text = message, style = { ['background-color'] = '#ffffff', ['color'] = '#000000' } })\n            elseif noty_type == 2 then\n                TriggerClientEvent('mythic_notify:client:SendAlert', source, { type = 'inform', text = message, style = { ['background-color'] = '#ffffff', ['color'] = '#000000' } })\n            elseif noty_type == 3 then\n                TriggerClientEvent('mythic_notify:client:SendAlert', source, { type = 'error', text = message, style = { ['background-color'] = '#ffffff', ['color'] = '#000000' } })\n            end\n        elseif Config.NotificationType.server == 'other' then\n            --add your own notification.\n        end\n    end\nend"))),(0,r.kt)("h2",{id:"eventsexports"},"Events/Exports"),(0,r.kt)("admonition",{title:"Events",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"These Events can be triggered to set the Robbery Status of Banks that will show in the menu letting Players know if the bank is ready to be robbed or not!"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(a.Z,{value:"server",label:"Server Event",attributes:{className:l.red},mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"jsx",title:"Server Event Example",showLineNumbers:!0,mdxType:"CodeBlock"},"TriggerClientEvent('dongle:UpdateRobberyChecks', source, BOOLEN) --BOOLEN = (true or false)")),(0,r.kt)(a.Z,{value:"client",label:"Client Event",attributes:{className:l.red},mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"jsx",title:"Server Event Example",showLineNumbers:!0,mdxType:"CodeBlock"},"TriggerEvent('dongle:UpdateRobberyChecks', BOOLEN) --BOOLEN = (true or false)")))))}y.isMDXComponent=!0}}]);