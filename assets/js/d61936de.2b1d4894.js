"use strict";(self.webpackChunkjuggin=self.webpackChunkjuggin||[]).push([[9686],{5162:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(7294),r=n(6010);const a={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return o.createElement("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>N});var o=n(7462),r=n(7294),a=n(6010),i=n(2466),s=n(6550),l=n(1980),u=n(7392),c=n(12);function f(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:r}}=e;return{value:t,label:n,attributes:o,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??f(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const o=(0,s.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(o.location.search);t.set(a,e),o.replace({...o.location,search:t.toString()})}),[a,o])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,a=d(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:a}))),[l,u]=p({queryString:n,groupId:o}),[f,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,a]=(0,c.Nk)(n);return[o,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:o}),g=(()=>{const e=l??f;return m({value:e,tabValues:a})?e:null})();(0,r.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),y(e)}),[u,y,a]),tabValues:a}}var g=n(2389);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:f}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),o=u[n].value;o!==s&&(f(t),l(o))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,o.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},i,{className:(0,a.Z)("tabs__item",h.tabItem,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:o}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==o}))))}function v(e){const t=y(e);return r.createElement("div",{className:(0,a.Z)("tabs-container",h.tabList)},r.createElement(b,(0,o.Z)({},e,t)),r.createElement(k,(0,o.Z)({},e,t)))}function N(e){const t=(0,g.Z)();return r.createElement(v,(0,o.Z)({key:String(t)},e))}},270:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>g,frontMatter:()=>u,metadata:()=>f,toc:()=>m});var o=n(7462),r=(n(7294),n(3905)),a=n(4866),i=n(5162),s=n(452),l=n(6795);const u={sidebar_position:3},c="Examples",f={unversionedId:"ESX/SickWarrants/Examples",id:"ESX/SickWarrants/Examples",title:"Examples",description:"Config",source:"@site/docs/ESX/SickWarrants/Examples.md",sourceDirName:"ESX/SickWarrants",slug:"/ESX/SickWarrants/Examples",permalink:"/docs/ESX/SickWarrants/Examples",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Events/Exports",permalink:"/docs/ESX/SickWarrants/Events"},next:{title:"QBCore",permalink:"/docs/QBCore/"}},d={},m=[{value:"Config",id:"config",level:2},{value:"Notifications",id:"notifications",level:2}],p={toc:m},y="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(y,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"examples"},"Examples"),(0,r.kt)("h2",{id:"config"},"Config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Config" showLineNumbers',title:'"Config"',showLineNumbers:!0},"Config = {}\n\nConfig.CheckVersion = true -- do you wanna stay up to date? will print in server console\n\nConfig.MenuType = 'ox_libs'\n\n\nConfig.jobsAuth = {\n    ['police'] = true,\n    ['bcso'] = true,\n}\n\nConfig.BountyJobs = {\n      ['bondsman'] = true,\n      ['police'] = true\n}\n\nConfig.NotificationType = { --['okokNotify' / 'mythic' / 'esx' / 'chat' / 'custom' ]\n    client = 'okokNotify', \n    server = 'okokNotify'\n}\n")),(0,r.kt)("h2",{id:"notifications"},"Notifications"),(0,r.kt)(a.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"server",label:"Client Notifications",attributes:{className:l.Z.red},mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"jsx",title:"Client Notifications",showLineNumbers:!0,mdxType:"CodeBlock"},"function Cnotify(noty_type, message)\n    if noty_type and message then\n        if Config.NotificationType.client == 'esx' then\n            ESX.ShowNotification(message)\n        elseif Config.NotificationType.client == 'okokNotify' then\n            if noty_type == 1 then\n                exports['okokNotify']:Alert(\"Warrants\", message, 10000, 'success')\n            elseif noty_type == 2 then\n                exports['okokNotify']:Alert(\"Warrants\", message, 10000, 'info')\n            elseif noty_type == 3 then\n                exports['okokNotify']:Alert(\"Warrants\", message, 10000, 'error')\n            end\n        elseif Config.NotificationType.client == 'mythic' then\n            if noty_type == 1 then\n                exports['mythic_notify']:SendAlert('success', message, { ['background-color'] = '#ffffff', ['color'] = '#000000' })\n            elseif noty_type == 2 then\n                exports['mythic_notify']:SendAlert('inform', message, { ['background-color'] = '#ffffff', ['color'] = '#000000' })\n            elseif noty_type == 3 then\n                exports['mythic_notify']:SendAlert('error', message, { ['background-color'] = '#ffffff', ['color'] = '#000000' })\n            end\n        elseif Config.NotificationType.client == 'chat' then\n            TriggerEvent('chatMessage', message)        \n        elseif Config.NotificationType.client == 'other' then\n            --add your own notification.       \n        end\n    end\nend")),(0,r.kt)(i.Z,{value:"client",label:"Server Notifications",attributes:{className:l.Z.red},mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"jsx",title:"Server Notifications",showLineNumbers:!0,mdxType:"CodeBlock"},"function Snotify(source, noty_type, message) -- Not Needed as is but maybe future update\n    if source and noty_type and message then\n        if Config.NotificationType.server == 'esx' then\n            TriggerClientEvent('esx:showNotification', source, message)        \n        elseif Config.NotificationType.server == 'okokNotify' then\n            if noty_type == 1 then\n                TriggerClientEvent('okokNotify:Alert', source, 'Warrants', message, 10000, 'success')\n            elseif noty_type == 2 then\n                TriggerClientEvent('okokNotify:Alert', source, 'Warrants', message, 10000, 'info')\n            elseif noty_type == 3 then\n                TriggerClientEvent('okokNotify:Alert', source, 'Warrants', message, 10000, 'error')\n            end\n        elseif Config.NotificationType.server == 'mythic' then\n            if noty_type == 1 then\n                TriggerClientEvent('mythic_notify:client:SendAlert', source, { type = 'success', text = message, style = { ['background-color'] = '#ffffff', ['color'] = '#000000' } })\n            elseif noty_type == 2 then\n                TriggerClientEvent('mythic_notify:client:SendAlert', source, { type = 'inform', text = message, style = { ['background-color'] = '#ffffff', ['color'] = '#000000' } })\n            elseif noty_type == 3 then\n                TriggerClientEvent('mythic_notify:client:SendAlert', source, { type = 'error', text = message, style = { ['background-color'] = '#ffffff', ['color'] = '#000000' } })\n            end\n        elseif Config.NotificationType.server == 'other' then\n            --add your own notification.\n        end\n    end\nend"))))}g.isMDXComponent=!0},6795:(e,t,n)=>{n.d(t,{Z:()=>o});const o={red:"red_LsyJ"}}}]);