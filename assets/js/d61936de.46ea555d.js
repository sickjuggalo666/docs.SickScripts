"use strict";(self.webpackChunkdocs_juggin_666=self.webpackChunkdocs_juggin_666||[]).push([[9686],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var f=r.createContext({}),c=function(e){var n=r.useContext(f),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(f.Provider,{value:n},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,f=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=c(t),u=o,g=p["".concat(f,".").concat(u)]||p[u]||y[u]||i;return t?r.createElement(g,s(s({ref:n},l),{},{components:t})):r.createElement(g,s({ref:n},l))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=u;var a={};for(var f in n)hasOwnProperty.call(n,f)&&(a[f]=n[f]);a.originalType=e,a[p]="string"==typeof e?e:o,s[1]=a;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},270:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>s,default:()=>y,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const i={sidebar_position:3},s="Examples",a={unversionedId:"ESX/SickWarrants/Examples",id:"ESX/SickWarrants/Examples",title:"Examples",description:"Config",source:"@site/docs/ESX/SickWarrants/Examples.md",sourceDirName:"ESX/SickWarrants",slug:"/ESX/SickWarrants/Examples",permalink:"/docs/ESX/SickWarrants/Examples",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Events/Exports",permalink:"/docs/ESX/SickWarrants/Events"},next:{title:"QBCore",permalink:"/docs/QBCore/"}},f={},c=[{value:"Config",id:"config",level:2},{value:"Client Side",id:"client-side",level:2},{value:"Server Side",id:"server-side",level:2}],l={toc:c},p="wrapper";function y(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"examples"},"Examples"),(0,o.kt)("h2",{id:"config"},"Config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Config',title:'"Config'},"Config = {}\n\nConfig.CheckVersion = true -- do you wanna stay up to date? will print in server console\n\nConfig.MenuType = 'ox_libs'\n\n\nConfig.jobsAuth = {\n    ['police'] = true,\n    ['bcso'] = true,\n}\n\nConfig.BountyJobs = {\n      ['bondsman'] = true,\n      ['police'] = true\n}\n\nConfig.NotificationType = { --['okokNotify' / 'mythic' / 'esx' / 'chat' / 'custom' ]\n    client = 'okokNotify', \n    server = 'okokNotify'\n}\n")),(0,o.kt)("h2",{id:"client-side"},"Client Side"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title='Client Notifications'",title:"'Client","Notifications'":!0},"function Notify(noty_type, message)\n    if noty_type and message then\n        if Config.NotificationType.client == 'esx' then\n            ESX.ShowNotification(message)\n\n        elseif Config.NotificationType.client == 'okokNotify' then\n            if notif_type == 1 then\n                exports['okokNotify']:Alert(\"Warrants\", message, 10000,'success')\n            elseif notif_type == 2 then\n                exports['okokNotify']:Alert(\"Warrants\", message, 10000, 'info')\n            elseif notif_type == 3 then\n                exports['okokNotify']:Alert(\"Warrants\", message, 10000, 'error')\n            end\n\n        elseif Config.NotificationType.client == 'mythic' then\n            if notif_type == 1 then\n                exports['mythic_notify']:SendAlert('success', message, { ['background-color'] = '#ffffff', ['color'] = '#000000' })\n            elseif notif_type == 2 then\n                exports['mythic_notify']:SendAlert('inform', message, { ['background-color'] = '#ffffff', ['color'] = '#000000' })\n            elseif notif_type == 3 then\n                exports['mythic_notify']:SendAlert('error', message, { ['background-color'] = '#ffffff', ['color'] = '#000000' })\n            end\n\n        elseif Config.NotificationType.client == 'chat' then\n            TriggerEvent('chatMessage', message)\n            \n        elseif Config.NotificationType.client == 'other' then\n            --add your own notification.\n            \n        end\n    end\nend\n")),(0,o.kt)("h2",{id:"server-side"},"Server Side"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title='Server Notifications'",title:"'Server","Notifications'":!0},"function Notify(source, noty_type, message)\n    if source and noty_type and message then\n        if Config.NotificationType.server == 'esx' then\n            TriggerClientEvent('esx:showNotification', source, message)\n        \n        elseif Config.NotificationType.server == 'okokNotify' then\n            if noty_type == 1 then\n                TriggerClientEvent('okokNotify:Alert', source, 'Warrants', message, 10000, 'success')\n            elseif noty_type == 2 then\n                TriggerClientEvent('okokNotify:Alert', source, 'Warrants', message, 10000, 'info')\n            elseif noty_type == 3 then\n                TriggerClientEvent('okokNotify:Alert', source, 'Warrants', message, 10000, 'error')\n            end\n\n        elseif Config.NotificationType.server == 'mythic' then\n            if noty_type == 1 then\n                TriggerClientEvent('mythic_notify:client:SendAlert', source, { type = 'success', text = message, style = { ['background-color'] = '#ffffff', ['color'] = '#000000' } })\n            elseif noty_type == 2 then\n                TriggerClientEvent('mythic_notify:client:SendAlert', source, { type = 'inform', text = message, style = { ['background-color'] = '#ffffff', ['color'] = '#000000' } })\n            elseif noty_type == 3 then\n                TriggerClientEvent('mythic_notify:client:SendAlert', source, { type = 'error', text = message, style = { ['background-color'] = '#ffffff', ['color'] = '#000000' } })\n            end\n\n        elseif Config.NotificationType.server == 'other' then\n            --add your own notification.\n\n        end\n    end\nend\n")))}y.isMDXComponent=!0}}]);