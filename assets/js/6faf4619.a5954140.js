"use strict";(self.webpackChunkjuggin=self.webpackChunkjuggin||[]).push([[7822],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=i,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return t?o.createElement(h,a(a({ref:n},u),{},{components:t})):o.createElement(h,a({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,a=new Array(r);a[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<r;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1343:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=t(7462),i=(t(7294),t(3905));const r={sidebar_position:1,sidebar_label:"General Info"},a=void 0,s={unversionedId:"ESX/SickFoodStands/General",id:"ESX/SickFoodStands/General",title:"General",description:"Config",source:"@site/docs/ESX/SickFoodStands/General.md",sourceDirName:"ESX/SickFoodStands",slug:"/ESX/SickFoodStands/General",permalink:"/docs/ESX/SickFoodStands/General",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"General Info"},sidebar:"tutorialSidebar",previous:{title:"Pictures",permalink:"/docs/ESX/SickFines-PEFCL/Pictures"},next:{title:"General Info",permalink:"/docs/ESX/SickJail/Installation"}},l={},c=[{value:"Config",id:"config",level:2},{value:"Civilian Menu",id:"civilian-menu",level:2},{value:"Toppings Menu",id:"toppings-menu",level:2},{value:"Cook Menu",id:"cook-menu",level:2}],u={toc:c},d="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"config"},"Config"),(0,i.kt)("admonition",{title:"Config",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The Config contains everything you will ever need to change or add! The options are endless and adding more food stands is as simple as copy paste and the changing of some items!"),(0,i.kt)("p",{parentName:"admonition"},"Three Different Menus are in use:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=Menus",title:"Menus"},"1. Civilian menu for browsing while waiting to order!\n2. Toppings to either just play an anim like you are adding toppings or there is an option to make it give you the item! \n3. Cooking menu is locked behind a job and the only reason ESX is currently needed for this script!\n"))),(0,i.kt)("h2",{id:"civilian-menu"},"Civilian Menu"),(0,i.kt)("p",null,"Civilian Menu is used for browsing what the shop has to offer! Make sure if you change shop items to add them here as well! Price is just for visual but should be set to what the shops want them sold for!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Civ Menu" showLineNumbers',title:'"Civ','Menu"':!0,showLineNumbers:!0},"menu = {\n    coords = vec3(238.1508, -818.6410, 30.1500), --Civilian menu location\n    size = vec3(1,1,1), -- Size for BoxZones\n    rotation = 90,-- Rotation for BozZones\n    label = 'See the Menu', -- target label\n    options = {\n        {\n            title = 'Hot Dog', -- item label\n            description = 'Hot off the grill. \\n Price: $5', --change price here just visual\n            icon = 'hand', -- item icon\n            disabled = true, -- this is so you can't click on it\n        },\n        {\n            title = 'Hamburger',\n            description = 'No cheese please. \\n Price: $5', --change price here just visual\n            icon = 'circle',\n            disabled = true,\n        },\n        {\n            title = 'CheeseBurger',\n            description = 'Yummm Cheese! \\n Price: $5', --change price here just visual\n            icon = 'bars',\n            disabled = true\n        }\n    }\n},\n")),(0,i.kt)("h2",{id:"toppings-menu"},"Toppings Menu"),(0,i.kt)("p",null,"Toppings could just be an animation that playes and you RP adding items to your burgers/hotdogs OR you could add items to give!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Toppings" showLineNumbers',title:'"Toppings"',showLineNumbers:!0},"ToppingsMenu = {\n    coords = vec3(241.8199, -815.2133, 30.0147), -- Coords for Toppings menu\n    size = vec3(1,1,1), -- size of BoxZone\n    rotation = 90, -- rotation of BoxZone\n    label = 'Get Toppings', -- target label\n    options = {\n        {\n            title = 'Ketchup',\n            description = 'Everyone loves Ketchup!',\n            icon = 'hand',\n            args = {\n                item = 'ketchup',\n                remove = false\n            },\n            onSelect = function(args)\n                lib.hideContext(false)\n                if lib.progressCircle({\n                    duration = 5000,\n                    position = 'bottom',\n                    useWhileDead = false,\n                    canCancel = true,\n                    disable = {\n                        car = true,\n                        move = true,\n                        combat = true\n                    },\n                    anim = {\n                        dict = 'anim@gangops@facility@servers@bodysearch@',\n                        clip = 'player_search'\n                    }\n                }) \n                then \n                    --TriggerServerEvent('SickFoodStands:GetItem',args, 1)-- you could add an item we just thought it was better as just an animation\n                else \n                    print('Do stuff when cancelled') \n                end    \n            end,\n        },\n        {\n            title = 'Mustard',\n            description = 'Some like it some don\\'t!',\n            icon = 'circle',\n            args = {\n                item = 'mustard',\n                remove = false\n                },\n            onSelect = function(args)\n                lib.hideContext(false)\n                if lib.progressCircle({\n                    duration = 5000,\n                    position = 'bottom',\n                    useWhileDead = false,\n                    canCancel = true,\n                    disable = {\n                        car = true,\n                        move = true,\n                        combat = true\n                    },\n                    anim = {\n                        dict = 'anim@gangops@facility@servers@bodysearch@',\n                        clip = 'player_search'\n                    }\n                }) \n                then \n                    --TriggerServerEvent('SickFoodStands:GetItem',args, 1)-- you could add an item we just thought it was better as just an animation\n                else \n                    print('Do stuff when cancelled') \n                end    \n            end,\n        },\n        {\n            title = 'Pickle Relish',\n            description = 'What Good is a Glizy with out some Reli?',\n            icon = 'bars',\n            args = {\n                item = 'relish',\n                remove = false\n            },\n            onSelect = function(args)\n                lib.hideContext(false)\n                if lib.progressCircle({\n                    duration = 5000,\n                    position = 'bottom',\n                    useWhileDead = false,\n                    canCancel = true,\n                    disable = {\n                        car = true,\n                        move = true,\n                        combat = true\n                    },\n                    anim = {\n                        dict = 'anim@gangops@facility@servers@bodysearch@',\n                        clip = 'player_search'\n                    }\n                }) \n                then \n                    --TriggerServerEvent('SickFoodStands:GetItem',args, 1)-- you could add an item we just thought it was better as just an animation\n                else \n                    print('Do stuff when cancelled') \n                end    \n            end,\n        }\n    }\n}\n")),(0,i.kt)("h2",{id:"cook-menu"},"Cook Menu"),(0,i.kt)("p",null,"Cooking menu is where the shops will make the items to sell! Make sure you look over the options here as there is alot to it! "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title='Cooking Menu' showLineNumbers",title:"'Cooking","Menu'":!0,showLineNumbers:!0},"coords = vec3(240.3483, -818.4785, 30.4268), --Coords for Cooking menu\nsize = vec3(1,1,1),\nrotation = 90,\njob = 'police', -- What job can use this menu?\nlabel = 'Open Cooking',\noptions = {\n    {\n        title = 'Hot Dog',\n        description = 'Whip up a Glizy',\n        icon = 'hand',\n        args = {\n        item = 'hotdog', --This is the item added make sure its an actual item\n        remove = true,\n        item1 = 'water',\n        item2 = 'hotdog'\n        },\n        onSelect = function(args)\n        lib.hideContext(false)\n            local input = lib.inputDialog('Food Stand', {{type = 'number', label = 'Enter Amount', description = 'How Many do you want?', icon = 'hashtag'}})\n            if not input or input[1] == '' then return end\n            local count = input[1] -- this is the count sent from the input dialog\n            if count > 10 then -- you can change max count here\n                lib.notify({\n                    title = 'Food Stand',\n                    description = 'You can\\'t take that many!',\n                    type = 'error'\n                })\n                return\n            end\n            if lib.progressCircle({\n                duration = 5000,\n                position = 'bottom',\n                useWhileDead = false,\n                canCancel = true,\n                disable = {\n                    car = true,\n                    move = true,\n                    combat = true\n                },\n                anim = {\n                    dict = 'anim@gangops@facility@servers@bodysearch@',\n                    clip = 'player_search'\n                }\n            }) \n            then \n                local inventory1 = exports.ox_inventory:Search('count', 'hotdog') -- stupid af\n                local inventory2 = exports.ox_inventory:Search('count', 'water') -- stupid af\n                if inventory1 >= count then \n                    if inventory2 >= count then -- but only way to do it\n                        TriggerServerEvent('SickFoodStands:GetItem',args, count)-- args.item = item, count = count of how many\n                    else\n                        lib.notify({\n                            title = 'Food Stand',\n                            description = 'You need more Buns',\n                            type = 'error'\n                        })\n                    end\n                else\n                    lib.notify({\n                        title = 'Food Stand',\n                        description = 'You need more HotDogs',\n                        type = 'error'\n                    })\n                end\n            else \n                print('Do stuff when cancelled') \n            end    \n        end,\n        metadata = {\n            {label = 'Item 1', value = 'Hot Dog Bun'}, --metadata for needed items\n            {label = 'Item 2', value = 'Hot Dog'}\n        },\n    },\n    {\n        title = 'Hamburger',\n        description = 'The staple in any daily diet',\n        icon = 'circle',\n        args = {\n        item = 'burger',\n        remove = true,\n        item1 = 'meat',\n        item2 = 'buns'\n        },\n        onSelect = function(args)\n        lib.hideContext(false)\n        local input = lib.inputDialog('Food Stand', {{type = 'number', label = 'Enter Amount', description = 'How Many do you want?', icon = 'hashtag'}})\n            if not input or input[1] == ' ' then return end\n            local count = input[1]\n            if count > 10 then\n                lib.notify({\n                    title = 'Food Stand',\n                    description = 'You can\\'t take that many!',\n                    type = 'error'\n                })\n                return\n            end\n            if lib.progressCircle({\n                duration = 5000,\n                position = 'bottom',\n                useWhileDead = false,\n                canCancel = true,\n                disable = {\n                    car = true,\n                    move = true,\n                    combat = true\n                },\n                anim = {\n                    dict = 'anim@gangops@facility@servers@bodysearch@',\n                    clip = 'player_search'\n                }\n            }) \n            then \n                local inventory1 = exports.ox_inventory:Search('count', 'meat') -- stupid af\n                local inventory2 = exports.ox_inventory:Search('count', 'buns') -- stupid af\n                if inventory1 >= count then \n                    if inventory2 >= count then -- but only way to do it\n                        TriggerServerEvent('SickFoodStands:GetItem',args, count)-- args.item = item, count = count of how many\n                    else\n                        lib.notify({\n                            title = 'Food Stand',\n                            description = 'You need more Meat',\n                            type = 'error'\n                        })\n                    end\n                else\n                    lib.notify({\n                        title = 'Food Stand',\n                        description = 'You need more Buns',\n                        type = 'error'\n                    })\n                end\n            else \n                print('Do stuff when cancelled') \n            end    \n        end,\n        metadata = {\n            {label = 'Item 1', value = 'Hamburger Bun'},\n            {label = 'Item 2', value = 'Meat'}\n        },\n    },\n    {\n        title = 'CheeseBurger',\n        description = 'Yummm Cheese!',\n        icon = 'bars',\n        args = {\n        item = 'cheeseburger',\n        remove = true,\n        item1 = 'cheese',\n        item2 = 'burger'\n        },\n        onSelect = function(args)\n        lib.hideContext(false)\n        local input = lib.inputDialog('Food Stand', {{type = 'number', label = 'Enter Amount', description = 'How Many do you want?', icon = 'hashtag'}})\n            if not input or input[1] == '' then return end\n            local count = input[1]\n            if count > 10 then\n                lib.notify({\n                    title = 'Food Stand',\n                    description = 'You can\\'t take that many!',\n                    type = 'error'\n                })\n                return\n            end\n            if lib.progressCircle({\n                duration = 5000,\n                position = 'bottom',\n                useWhileDead = false,\n                canCancel = true,\n                disable = {\n                    car = true,\n                    move = true,\n                    combat = true\n                },\n                anim = {\n                    dict = 'anim@gangops@facility@servers@bodysearch@',\n                    clip = 'player_search'\n                }\n            }) \n            then \n                TriggerServerEvent('SickFoodStands:GetItem',args, count)\n            else \n                print('Do stuff when cancelled') \n            end    \n        end,\n        metadata = {\n            {label = 'Item 1', value = 'Hamburger Bun'},\n            {label = 'Item 2', value = 'Hamburger'},\n            {label = 'Item 3', value = 'Cheese'},\n        },\n    }\n},\n")))}p.isMDXComponent=!0}}]);